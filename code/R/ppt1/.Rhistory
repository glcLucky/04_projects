cement <- data.frame(X1 = c(7, 1, 11, 11, 7, 11, 3, 1, 2, 21, 1, 11, 10),
X2 = c(26,29, 56, 31, 52, 55, 71, 31, 54, 47, 40, 66, 68),
X3 = c(6, 15, 8, 8, 6, 9, 17, 22, 18, 4, 23, 9, 8),
X4 = c(60, 52, 20, 47, 33, 22, 6, 44, 22, 26,34, 12, 12),
Y = c(78.5, 74.3, 104.3, 87.6, 95.9, 109.2, 102.7, 72.5, 93.1, 115.9, 83.8, 113.3, 109.4))
cement
mod <- linearRidge(Y ~ ., data = cement , nPCs = NULL)
summary(mod)
lm.sol <- lm(Y ~ ., data = cement)
summary(lm.sol)
# 从结果看，截距和自变量的相关系数均不显，但F检验却能通过 可能存在多重共线性问题
# 下面利用car包中的vif（）函数查看各自变量间的共线情况
library(car)
vif(lm.sol)
# 从结果看，各自变量的VIF值都超过10，存在多重共线性，其中，X2与X4的VIF值均超过200.
plot(X2 ~ X4, col = "red", data = cement)
cement
plot(lm.ridge(y~x1+x2+x3+x4,longley,lambda = seq(0,1,0.0001),data = cement))
plot(lm.ridge(Y~X1+X2+X3+X4,longley,lambda = seq(0,1,0.0001),data = cement))
ridge.sol <- lm.ridge(Y ~ ., lambda = seq(0, 150, length = 151), data = cement,
model = TRUE)
ridge.sol$lambda[which.min(ridge.sol$GCV)]  ##找到GCV最小时的lambdaGCV
ridge.sol <- lm.ridge(Y ~ ., lambda = seq(0, 1, length = 151), data = cement,
model = TRUE)
names(ridge.sol)  # 变量名字
ridge.sol$lambda
ridge.sol$lambda[which.min(ridge.sol$GCV)]  ##找到GCV最小时的lambdaGCV
## [1] 1
ridge.sol$coef[which.min(ridge.sol$GCV)]  ##找到GCV最小时对应的系数
par(mfrow = c(1, 2))
# 画出图形，并作出lambdaGCV取最小值时的那条竖直线
matplot(ridge.sol$lambda, t(ridge.sol$coef), xlab = expression(lamdba), ylab = "Cofficients",
type = "l", lty = 1:20)
abline(v = ridge.sol$lambda[which.min(ridge.sol$GCV)])
plot(ridge.sol$lambda, ridge.sol$GCV, type = "l", xlab = expression(lambda),
ylab = expression(beta))
abline(v = ridge.sol$lambda[which.min(ridge.sol$GCV)])
# 下面利用ridge包中的linearRidge()函数进行自动选择岭回归参数
library(ridge)
mod <- linearRidge(Y ~ ., data = cement)
summary(mod)
help(linearRidge)
mod <- linearRidge(Y ~ ., data = cement ,lambda = 0.3267)
summary(mod)
plot(ridge.sol$lambda, ridge.sol$GCV, type = "l", xlab = expression(lambda),
ylab = expression(beta))
abline(v = ridge.sol$lambda[which.min(ridge.sol$GCV)])
ridge.sol$lambda[which.min(ridge.sol$GCV)]
# lasso
library(lars)
install.packages('lars')
library(lars)
x = as.matrix(cement[, 1:4])
y = as.matrix(cement[, 5])
x
(laa = lars(x, y, type = "lar"))  #lars函数值用于矩阵型数据
# 由此可见，LASSO的变量选择依次是X4，X1，X2，X3
plot(laa)  #绘出图
summary(laa)  #给出Cp值
(laa = lars(x, y, type = "lar"))  #lars函数值用于矩阵型数据
# ts_q8
library(tseries)
library(forecast)
install.packages('forecast')
#install.packages('forecast')
ts=read.csv("E:/04_project/R/ts_q8.csv" , header = F)
ts1=ts(ts)
ts1
tsdisplay(ts1)#也可以直接使用tsdisplay来观察，它包含了时序图，以及acf、pacf两个相关图
plot.ts(ts1)
plot.ts(ts1 ,xlab ="时间")
plot.ts(ts1 ,xlab ="时间" ，ylab = "降雪量")
plot.ts(ts1 ,xlab ="时间" , ylab = "降雪量")
plot.ts(ts1 ,xlab ="时间" , ylab = "降雪量" , main = "年份与降雪量时序图")
adf.test(ts1)
help("adf.test")
x <- rnorm(1000)  # no unit-root
adf.test(x
adf.test(x)
x <- rnorm(1000)  # no unit-root
adf.test(x)
plot(x)
y <- diffinv(x)   # contains a unit-root
plot(y)
adf.test(y)
adf.test(ts1 alternative = "explosive") # 平稳性检验
adf.test(ts1, alternative = "explosive") # 平稳性检验
adf.test(ts1) # 平稳性检验 默认备择假设是平稳
## 纯随机检验
Box.test(ts1 ， type = "Ljung-Box")
## 纯随机检验
Box.test(ts1 , type = "Ljung-Box")
## 平稳性检验
adf.test(ts1) # 平稳性检验 默认备择假设是平稳 此处p=0.132 故解释原假设 认为序列不平稳
## 纯随机检验
Box.test(ts1 , type = "Ljung-Box")
#Ljung-Box检验 H0：序列是纯随机序列 p=0.01284 拒绝，认为原序列非纯随机 所以可以用于建模
##建模
fit=auto.arima(ts1,trace = TRUE)
##建模
auto.arima(ts1,trace = TRUE) # 选择结果为ARMA(0,1,1)
fit = arima(ts1 , order = c(0,1,1))
summary(fit)
## 预测
forecast(fit,h=5)
## 时间序列 练习案例 尼罗河
plot(Nile,xlab = "年份" , ylab = "尼罗河流量")
acf(Nile,main = "自相关图")
#adf检验
adf.test(Nile) #p-value=0.0642,故在95%的置信度下，无法拒绝不平稳的原假设，这与图示法结果一致
ndiffs(Nile)#值为1 故需要进行一次差分
Nile_diff=diff(Nile)
ndiffs(Nile_diff) # 值为0 故无需进行差分
tsdisplay(Nile_diff)
adf.test(Nile_diff) #p-value=0.0642,故在95%的置信度下，无法拒绝不平稳的原假设，这与图示法结果一致
arima.sim()
help(arima.sim)
## 时间序列数据模拟
arima.sim(n = 63, list(ar = c(0.8897, -0.4858), ma = c(-0.2279, 0.2488)))
## 时间序列数据模拟
a=arima.sim(n = 63, list(ar = c(0.8897, -0.4858), ma = c(-0.2279, 0.2488)))
a.plot()
plot(a)
adf.test(a)
ts.plot(a)
# 给定模型参数
ts.sim <- arima.sim(list(order = c(1,1,0)), n = 200)
# 给定模型参数
ts.sim <- arima.sim(order = c(1,1,0), n = 200)
# 给定模型参数
ts.sim <- arima.sim(list(order = c(1,1,0), ar = 0.7), n = 200)
# 给定模型参数
b <- arima.sim(list(order = c(1,1,0), ar = 0.7), n = 200)
plot(b)
# 给定模型参数
b <- arima.sim(list(order = c(1,0,0), ar = 0.7), n = 200)
plot(b)
# 给定模型参数
b <- arima.sim(list(order = c(1,0,0), ar = 1.7), n = 200)
plot(b)
# 给定模型参数
b <- arima.sim(list(order = c(1,0,0), ar = 1.7), n = 200)
# 给定模型参数
b <- arima.sim(list(order = c(1,0,0), ar = 0.7), n = 200)
# 给定模型参数
b <- arima.sim(list(order = c(1,1,0), ar = 0.7), n = 200)
plot(b)
adf.test(b)
# 给定模型参数
b <- arima.sim(list(order = c(2,1,0), ar = 0.7), n = 200)
# 给定模型参数
b <- arima.sim(list(order = c(2,1,0), ar = c(0.7,0.3), n = 200)
adf.test(b)
# 给定模型参数
b <- arima.sim(list(order = c(2,1,0), ar = c(0.7,0.3), n = 200)
# 给定模型参数
b <- arima.sim(list(order = c(2,1,0), ar = c(0.7,0.3), n = 200))
# 给定模型参数
b <- arima.sim(list(order = c(2,1,0), ar = c(0.7,0.3)), n = 200)
# 给定模型参数
b <- arima.sim(list(order = c(2,1,0), ar = c(0.7,1.3)), n = 200)
# 给定模型参数
b <- arima.sim(list(order = c(2,1,0), ar = c(0.7,2.3)), n = 200)
# 给定模型参数
b <- arima.sim(list(order = c(2,1,0), ar = c(0.7,0.9)), n = 200)
# 给定模型参数
b <- arima.sim(list(order = c(2,1,0), ar = c(1.7,0.9)), n = 200)
# 给定模型参数
b <- arima.sim(list(order = c(2,1,0), ar = c(1.7,1.9)), n = 200)
# 给定模型参数
b <- arima.sim(list(order = c(2,1,0), ar = c(1.7,1.2)), n = 200)
# 给定模型参数
b <- arima.sim(list(order = c(2,1,0), ar = c(0.8897, -0.4858)), n = 200)
plot(b)
# 给定模型参数和ar的系数
b <- arima.sim(list(order = c(1,0,1), ar = c(0.8897, -0.4858)), n = 200)
# 给定模型参数和ar的系数
b <- arima.sim(list(order = c(1,0,1), ar = c(1.8897, -0.4858)), n = 200)
# 给定模型参数和ar的系数
b <- arima.sim(list(order = c(1,0,1), ar = c(1.8897, 0.4858)), n = 200)
# 给定模型参数和ar的系数
b <- arima.sim(list(order = c(1,0,1), ar = c(0.8897, 1.4858)), n = 200)
# 给定模型参数和ar的系数
b <- arima.sim(list(order = c(1,0,1), ar = c(0.8897, -1.4858)), n = 200)
# 给定模型参数和ar的系数
b <- arima.sim(list(order = c(1,0,1), ar = c(0.8897, -0.4858)), n = 200)
# 给定模型参数和ar的系数
b <- arima.sim(list(order = c(1,0,1), ar = c(0.8897)), n = 200)
# 给定模型参数和ar的系数
b <- arima.sim(list(order = c(1,1,0), ar = c(0.8897, -0.4858)), n = 200)
2
# 给定模型参数和ar的系数
b <- arima.sim(list(order = c(2,1,0), ar = c(0.8897, -0.4858)), n = 200)
b <- arima.sim(list(order = c(1,0,1), ar = 0.8897), n = 200)
b <- arima.sim(list(order = c(1,0,1)), n = 200)
b <- arima.sim(order = c(1,0,1), n = 200)
b <- arima.sim(list(order = c(1,0,1), ar = 0.8897, ma = -0.92), n = 200)
plot(b)
b <- arima.sim(list( ar = 0.8897, ma = -0.92), n = 200)
plot(b)
plot(b)
adf.test(b)
help("adf.test")
adf.test(b, k= 3)
adf.test(b, k= 3 ,type = "")
fit = arima(b, order = c(1,0,1), method = "ML")
summary(fit)
fit = arima(b, order = c(1,0,1), method = "CSS-ML")
summary(fit)
forecast(fit,h = 5)
#预测
predict=forecast(fit,h = 5)
predict$pred
predict
predict$mean
plot(Nile)
lines(predict$mean,col="red")
lines(predict$mean,col="red")
predict.plot
predict.plot()
plot(predict)
#预测
predict = forecast(fit,h = 25)
plot(predict)
#预测
predict = forecast(fit,h = 125)
plot(predict)
#预测
predict = forecast(fit,h = 5)
#预测
predict = forecast(fit,h = 5)
predict
plot(predict)
#预测
predict=predict(fit,10)
#最好基于未差分的  方便预测 不然预测的结果也是差分后的结果
fit = arima(Nile , order = c(1,1,1) , method = "ML") #ML 最大似然 CSS 条件最小二乘
#预测
predict=predict(fit,10)
predict
predict$pred
plot(Nile)
lines(predict$pred,col="red")
predict$se
lines(predict$pred+predict$se,col="green")
lines(predict$pred-predict$se,col="green")
#预测
predict=predict(fit,100)
plot(Nile)
lines(predict$pred,col="red")
lines(predict$pred+predict$se,col="green")
lines(predict$pred-predict$se,col="green")
lines(predict$pred,col="red")
plot(Nile)
#预测
predict=predict(fit,100)
lines(predict$pred,col="red")
#预测
predict=predict(fit,1000)
lines(predict$pred,col="red")
predict$pred
#预测
predict=predict(fit,10)
plot(Nile)
lines(predict$pred,col="red")
lines(predict$pred+predict$se,col="green")
lines(predict$pred-predict$se,col="green")
predict=forecast(fit, h = 10)
plot(predict)
##预测
#利用predict
predict=predict(fit,10)
plot(predict)
## 逻辑回归
mydata <- read.csv("http://www.ats.ucla.edu/stat/data/binary.csv")
mydata
## 逻辑回归
install.packages("DAAG")
library(lattice)
library(DAAG)
head(anesthetic)
cdplot(factor(nomove)~conc,data=anesthetic,main='条件密度图',ylab='病人移动',xlab='麻醉剂量')
cdplot(factor(nomove)~conc,data=anesthetic,main='条件密度图',ylab='病人移动',xlab='麻醉剂量')
## 逻辑回归
index <- which(iris$Species == 'setosa')
index
iris
## 逻辑回归
head(iris)
iris_sub <- iris[- index,]
index <- which(iris$Species == 'setosa')
iris_sub
ir$Species
iris_sub$Species
levels(iris_sub$Species)[1]
levels(iris_sub$Species)
levels(iris_sub$Species)
iris_sub
levels(iris_sub$Species)[1] <- ''
levels(iris_sub$Species)
split <- sample(100,100*(2/3))
split
iris_sub
split
#生成训练集
ir_train <- iris_sub[split,]
ir_train
#生成测试集
ir_test <- iris_sub[-split,]
fit <- glm(Species ~.,family=binomial(link='logit'),data=ir_train)
fit
summary(fit)
# 预测
real <- ir_test$Species
predict
pred
data.frame(real,pred)
data.frame(real,predict)
predict <- predict(fit,type='response',newdata=ir_test)
predict
data.frame(real,predict)
res <- data.frame(real,predict =ifelse(predict>0.5,'virginca','versicorlor'))
#查看模型效果
plot(res)
res
df_real_pred=data.frame(real,predict =ifelse(predict>0.5,'virginca','versicorlor'))
df_real_pred
predict
real
res <- data.frame(real,predict =ifelse(predict>0.5,'virginca','versicorlor'))
misClasificError <- mean(res$real != res$predict)
res
predict <- predict(fit,type='response',newdata=ir_test)
predict = ifelse(predict>0.5,'virginca','versicorlor')
predict
misClasificError <- mean(res$real != predict)
misClasificError
res$real != predict
predict
res$real
help(glm)
## 逻辑回归
install.packages("AER")
data(Affairs, package="AER")
head(Affairs)
summary(Affairs)
table(Affairs$affairs)
[Affairs$affairs > 0]
Affairs$affairs > 0
Affairs$ynaffair[Affairs$affairs > 0]
head(Affairs)
[Affairs$affairs > 0]
Affairs$ynaffair[Affairs$affairs > 0]
#将affair转换为二分类变量 命名为ynaffair
Affairs$ynaffair[Affairs$affairs > 0] <- 1 # 有婚外情
head(Affairs)
Affairs$ynaffair[Affairs$affairs == 0] <- 0 # 无婚外情
head(Affairs)
Affairs$ynaffair <- factor(Affairs$ynaffair,
levels=c(0,1),
labels=c("No","Yes"))
head(Affairs)
table(Affairs$ynaffair)
help(table)
fit.full <- glm(ynaffair ~ gender + age + yearsmarried + children +
religiousness + education + occupation +rating,
data=Affairs, family=binomial(link = 'logit'))
summary(fit.full)
fit.reduced <- glm(ynaffair ~ age + yearsmarried + religiousness +
rating, data=Affairs, family=binomial(link = 'logit'))
summary(fit.reduced)
# 利用anova比较fit.full和fit.reduced是否有显著差异
anova(fit.reduced, fit.full, test="Chisq")
#解释模型参数
coef(fit.reduced)
exp(coef(fit.reduced))
# 获得系数的置信区间
confint(fit.reduced)
testdata <- data.frame(rating=c(1, 2, 3, 4, 5), age=mean(Affairs$age),
yearsmarried=mean(Affairs$yearsmarried),
religiousness=mean(Affairs$religiousness))
testdata
testdata$prob <- predict(fit.reduced, newdata=testdata, type="response")
testdata
pred <- predict(fit.reduced, newdata=testdata, type="response")
pred
pred <- predict(fit.reduced, newdata=testdata, type="response") = ifelse(predict>0.5, 1, 0)
pred <- predict(fit.reduced, newdata=testdata, type="response")
pred
testdata$prob <- ifelse(pred>0.5, 1, 0)
testdata
testdata <- data.frame(rating=c(1, 2, 3, 4, 5), age=mean(Affairs$age),
yearsmarried=mean(Affairs$yearsmarried),
religiousness=mean(Affairs$religiousness))
pred <- predict(fit.reduced, newdata=testdata, type="response")
testdata$prob <- predict(fit.reduced, newdata=testdata, type="response")
testdata$result <- ifelse(pred>0.5, 1, 0)
testdata
split
#预测 基于测试集
#首先将数据集拆分成训练集和测试集
split = sample(Affairs,0.2)
split
View(split)
Affairs
#预测 基于测试集
#首先将数据集拆分成训练集和测试集
split = sample(100,0.2)
split
#预测 基于测试集
#首先将数据集拆分成训练集和测试集
split = sample(100,20)
split
#预测 基于测试集
#首先将数据集拆分成训练集和测试集
split = sample(Affairs,20)
nrow(Affairs)
#预测 基于测试集
#首先将数据集拆分成训练集和测试集
split = sample(nrow(Affairs),20)
split
#预测 基于测试集
#首先将数据集拆分成训练集和测试集
split = sample(nrow(Affairs),nrow(Affairs)*0.3)
split
split
Affairs_train <- Affairs[-split ,]
Affairs_test <- Affairs[split ,]
Affairs_train
Affairs_test
fit.full <- glm(ynaffair ~ gender + age + yearsmarried + children +
religiousness + education + occupation +rating,
data=Affairs_train, family=binomial(link = 'logit'))
summary(fit.full)
fit.full <- glm(ynaffair ~ gender + age + yearsmarried + children +
religiousness + education + occupation +rating,
data=Affairs, family=binomial(link = 'logit'))
summary(fit.full)
split = sample(nrow(Affairs),nrow(Affairs)*0.2) #从Affairs中随机取30%的样本序号
Affairs_train <- Affairs[-split ,]
Affairs_test <- Affairs[split ,]
fit.full <- glm(ynaffair ~ gender + age + yearsmarried + children +
religiousness + education + occupation +rating,
data=Affairs_train, family=binomial(link = 'logit'))
summary(fit.full)
fit.reduced <- glm(ynaffair ~ age + yearsmarried + religiousness +
rating, data=Affairs_train, family=binomial(link = 'logit'))
summary(fit.reduced)
# 测试
pred = predict(fit, newdata = Affairs_test , type = 'response')
fit.full <- glm(ynaffair ~ gender + age + yearsmarried + children +
religiousness + education + occupation +rating,
data=Affairs, family=binomial(link = 'logit'))
summary(fit.full)
# 测试
pred = predict(fit, newdata = Affairs_test , type = 'response')
Affairs_test
fit
pred = predict(fit.full, newdata = Affairs_test , type = 'response')
pred
Affairs_test
# 测试
head(Affairs_test)
test = Affairs_test[,c('ynaffair','gender')]
test = Affairs_test[,c('ynaffair','gender')]
test
test = Affairs_test[,c('ynaffair','gender','age','yearsmarried','children','religiousness','education','occupation','rating')]
test
test_label_actual = Affairs_test[,'ynaffair']
test_label_actual
pred = predict(fit.full, newdata = test_attr , type = 'response')
test_attr = Affairs_test[,c(,'gender','age','yearsmarried','children','religiousness','education','occupation','rating')]
test_attr = Affairs_test[,c('gender','age','yearsmarried','children','religiousness','education','occupation','rating')]
pred = predict(fit.full, newdata = test_attr , type = 'response')
pred
test_label$actual = Affairs_test[,'ynaffair']
test_label = data.frame("actual","pred")
test_label
test_label$actual = Affairs_test[,'ynaffair']
View(test_label)
View(test_label)
test_label = data.frame()
test_label$actual = Affairs_test[,'ynaffair']
test_label = data.frame(c('actual','pred'))
help("data.frame")
actual = Affairs_test[,'ynaffair']
actual
test_label$actual=actual
test_label <- data.frame(actual,predict=ifelse(pred > 0.5, Yes ,No))
test_label <- data.frame(actual,predict=ifelse(pred > 0.5, 'Yes' ,'No'))
test_label
Affairs_test
predict
pred
test_label
misClasificError <- mean(test_label$actual != test_label$predict)
misClasificError
accuracy_rate <- mean(test_label$actual = test_label$predict)
accuracy_rate <- mean(test_label$actual == test_label$predict)
accuracy_rate
qnorm(0.95)
qnorm(0.99)
1000/1.6449
1000/1.6449*2.3263
a=c(2,1,3,2,9,5,7,3)
sd(a)
a*10
b=a*10
sd(b)
qnorm(0.9)
library(MASS)
library(MASS)
